import os
import pandas as pd
from sqlalchemy import create_engine
from dotenv import load_dotenv, find_dotenv

from src.data_loader import charger_aeroports, charger_vols, charger_compagnies, charger_avions

def get_db_engine():
    load_dotenv(find_dotenv('.env.local'))
    
    db_url = os.getenv("DB_CONNECTION_STRING")
    print(f"DB_CONNECTION_STRING: {db_url}")
    
    if not db_url:
        raise ValueError("L'URL de connexion √† la base de donn√©es n'est pas d√©finie. V√©rifiez votre fichier .env.local")
        
    try:
        engine = create_engine(db_url)
        print("Connexion √† la base de donn√©es Supabase r√©ussie.")
        return engine
    except Exception as e:
        print(f"Erreur de connexion √† la base de donn√©es : {e}")
        return None

def populate_database():
    """
    Fonction principale pour charger, pr√©parer et ins√©rer toutes les donn√©es.
    """
    engine = get_db_engine()
    if engine is None:
        return

    # --- √âtape 1 : Charger toutes les donn√©es depuis les fichiers ---
    print("\n--- Chargement des donn√©es depuis les fichiers source ---")
    df_aeroports = charger_aeroports()
    df_vols = charger_vols()
    df_compagnies = charger_compagnies()
    df_avions = charger_avions()
    
    # --- √âtape 2 : Pr√©parer et nettoyer les donn√©es (CRUCIAL) ---
    print("\n--- Pr√©paration et nettoyage des donn√©es ---")

    # Probl√®me 1: Ajouter les 4 a√©roports manquants mentionn√©s dans l'√©nonc√©
    aeroports_manquants = pd.DataFrame({
        'faa': ['BQN', 'PSE', 'SJU', 'STT'],
        'name': ['Rafael Hernandez Airport', 'Mercedita Airport', 'Luis Munoz Marin Intl', 'Cyril E. King Airport'],
        'lat': [18.4949, 18.0083, 18.4394, 18.3373],
        'lon': [-67.1294, -66.5633, -66.0018, -64.9734],
        'alt': [237, 29, 9, 24],
        'tz': [-4, -4, -4, -4],
        'dst': ['A', 'A', 'A', 'A'],
        'tzone': ['America/Puerto_Rico', 'America/Puerto_Rico', 'America/Puerto_Rico', 'America/St_Thomas']
    })
    df_aeroports = pd.concat([df_aeroports, aeroports_manquants], ignore_index=True)
    print("‚úÖ 4 a√©roports manquants ajout√©s avec succ√®s.")
    
    # Probl√®me 2: G√©rer les types de donn√©es avant insertion
    df_avions['year'] = df_avions['year'].astype('Int64')
    print("‚úÖ Types de donn√©es corrig√©s.")

    # --- √âtape 3 : Ins√©rer les donn√©es dans Supabase (dans le bon ordre) ---
    print("\n--- D√©marrage de l'insertion des donn√©es dans Supabase ---")
    try:
        # L'ordre est important √† cause des cl√©s √©trang√®res !
        df_compagnies.to_sql('airlines', engine, if_exists='append', index=False)
        print("1/4 - Table 'airlines' peupl√©e avec succ√®s.")
        
        df_aeroports.to_sql('airports', engine, if_exists='append', index=False)
        print("2/4 - Table 'airports' peupl√©e avec succ√®s.")
        
        df_avions.to_sql('planes', engine, if_exists='append', index=False)
        print("3/4 - Table 'planes' peupl√©e avec succ√®s.")
        
        df_vols.to_sql('flights', engine, if_exists='append', index=False, chunksize=10000)
        print("4/4 - Table 'flights' peupl√©e avec succ√®s.")
        
        print("\nüéâ Mission accomplie ! La base de donn√©es a √©t√© enti√®rement peupl√©e.")

    except Exception as e:
        print(f"‚ùå Une erreur est survenue lors de l'insertion des donn√©es : {e}")